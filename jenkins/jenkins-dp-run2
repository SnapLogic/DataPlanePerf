pipeline {
    agent { label "dpperf" }

    parameters {
        choice(name: 'envBaseurl', choices: ['https://cdn.canary.elastic.snaplogicdev.com', 'https://stage.elastic.snaplogicdev.com'], description: 'Select environment')
    }

    environment {
        W_KEY = credentials('slackWebHook')
        USER_KEY = credentials('userAdmin')
        Version = ""
        slackChannel = "#dp-qa-alerts"
        slackUsername = "Jenkins"
        slackIcon = ":jenkins:"
        greenColor = "#36a64f"
        redColor = "#FF0000"
    }

    stages {
        stage('Send Slack Notification') {
            steps {
                script {
                    // Send initial Slack notification
                    def slackResponse = slackSend(
                        channel: "antons-test",
                        message: "msg1",
                        tokenCredentialId: env.W_KEY, // Ensure credentials are used correctly
                        username: slackUsername,
                        iconEmoji: slackIcon
                    )

                    // Validate the response
                    if (slackResponse?.threadId) {
                        slackSend(channel: slackResponse.threadId, message: "reply #1")
                        slackSend(channel: slackResponse.threadId, message: "reply #2")
                    } else {
                        error "Slack notification failed: No threadId returned."
                    }
                }
            }
        }
    }
}
