pipeline {
    agent { label "dpperf" }

    // Scheduled to run at 19:00 UTC every Saturday
    triggers {
        cron('0 19 * * 6')
    }

    parameters {
        string(name: 'envBaseurl', defaultValue: 'https://cdn.canary.elastic.snaplogicdev.com', description: 'Select environment')
    }

    environment {
        W_KEY = credentials('slackWebHook')
        Version = ""
        USER_KEY = credentials('userAdmin')
    }

    stages {
        stage('Initialization') {
            steps {
                script {
                    // Request to obtain version, consider to remove hardcoded creds
                    def service2Response = sh(
                        script: """
                        curl -s "${params.envBaseurl}/api/1/rest/public/snaplex/DpPerf?plex_path=/DpPerf/shared/CloudSnaplexMedium" \
                        --header 'Authorization: Basic ${env.USER_KEY}'
                        """,
                        returnStdout: true
                    ).trim()

                    // Parse JSON response
                    def jsonParser = new groovy.json.JsonSlurper()
                    def jsonData = jsonParser.parseText(service2Response)

                    // Extract pkg_version
                    Version = jsonData.response_map["/DpPerf/shared/CloudSnaplexMedium"].cc_info.running.version[0]

                    echo "pkg_version: ${Version}"
                }
            }
        }
        stage('Send Slack Notification') {
            steps {
                script {
                    // Build Slack Notification Message
                    def slackChannel = "#dp-qa-alerts"
                    def slackUsername = "Jenkins"
                    def slackIcon = ":jenkins:"
                    def color = "#36a64f"
                    def slackWebHook = ''

                    def slackMessage = """
                        {
                            "attachments": [
                                {
                                    "fallback": "Data Plane weekly performance tests have started.",
                                    "color": "${color}",
                                    "text": "Data Plane weekly performance tests have started - <${env.BUILD_URL}|Jenkins job.>\n - Pod: canary\n - DP version: ${Version}"
                                }
                            ],
                            "channel": "${slackChannel}",
                            "username": "${slackUsername}",
                            "icon_emoji": "${slackIcon}"
                        }
                    """

                    // Send Slack Notification via curl
                    sh """
                        curl -X POST -H 'Content-type: application/json' \
                        --data '${slackMessage}' \
                        '${env.W_KEY}'
                    """
                }
            }
        }
        stage('Downstream Job for Scheduled Task') {
            steps {
                script {
                    echo "DP Version: ${Version}"
                    def curlCommand2 = """
                        curl -X POST "https://canv2-dpperf-dpperfrunner-fm.snaplogicdev.io/api/1/rest/feed/run/task/DpPerf/ScheduledTask/ScheduledTaskPerf/ScheduledTrigger?NumOfTasks=500&Release=${Version}" \
                             -H "Content-Type: application/json" \
                             -H "Authorization: Bearer dpqa"
                    """
                    echo "Curl Command: ${curlCommand2}"
                    sh(script: curlCommand2)
                    sleep 300 // Wait 5 minutes
                }
            }
        }
        stage('Downstream Job for Ultra Task') {
            steps {
                script {
                    // The cURL command to trigger the API
                    def curlCommand0 = """
                        curl -X GET "https://canary.elastic.snaplogicdev.com/api/1/rest/slsched/feed/DpPerf/UltraTask/shared/DP_UltraPerf_DeleteUltraTasks_Task" \\
                             -H "Content-Type: application/json" \\
                             -H "Authorization: Bearer dpqa" \\
                    """

                    // Debugging: Print the cURL command
                    echo "Curl Command: ${curlCommand0}"
                    echo "Deleting existing Ultra tasks created by previous run"

                    // Execute the cURL command
                    sh curlCommand0

                    // The cURL command to trigger the API
                    def curlCommand1 = """
                        curl -X GET "https://canary.elastic.snaplogicdev.com/api/1/rest/slsched/feed/DpPerf/UltraTask/shared/DP_UltraPerf_Trigger_Task?release=${params.Version}&env=https://cdn.canary.elastic.snaplogicdev.com" \\
                             -H "Content-Type: application/json" \\
                             -H "Authorization: Bearer dpqa" \\
                    """

                    // Debugging: Print the cURL command
                    echo "Curl Command: ${curlCommand1}"
                    echo "Running Ultra Performance Tests"

                    // Execute the cURL command
                    sh curlCommand1
                    echo "Results can be viewed at https://lookerstudio.google.com/reporting/e6245e67-81d0-437f-842e-588c1c8a607d/page/HZ0UE"
                    echo "Waiting for 5 minutes to get snaplexes cooled down"
                    sleep 300 // seconds
                }
            }
        }
        stage('Downstream Job for Triggered Task') {
            steps {
                script {
                    def values = [10, 25, 50, 75, 120, 170, 220]
                    for (int i = 0; i < values.size(); i++) {
                        def currentValue = values[i]

                        // Calculate and print remaining values
                        def remainingValues = values.drop(i + 1)
                        echo "Remaining tests to run: ${remainingValues}"

                        echo "Triggering downstream job - Run #${i + 1} with value=${currentValue}"
                        try {
                            // Trigger Downstream job
                            def result = build(
                                job: 'platform-jar/DataPlane/dp-performance/jmeter-runner',
                                wait: true,
                                parameters: [
                                    string(name: 'envBaseurl', value: 'canv2-dpperf-groundsnaplexmedium-fm.snaplogicdev.io'),
                                    string(name: 'Version', value: '4.39.1'),
                                    string(name: 'TestPlan', value: 'RTTChildToGrandChild.jmx'),
                                    string(name: 'Threads', value: currentValue.toString())
                                ]
                            )
                            echo "Downstream job - Run #${i + 1} completed successfully with result: ${result.getResult()}."
                        } catch (Exception e) {
                            // Handle failure of the downstream job
                            echo "Error: Downstream job - Run #${i + 1} failed with error: ${e.getMessage()}."
                            // Set current build to unstable
                            currentBuild.result = 'UNSTABLE'
                        }
                        // Sleep for 5 minutes before the next trigger
                        if (i < values.size() - 1) {
                            echo "Chill time for 5 minutes before the next run"
                            sleep(time: 300, unit: 'SECONDS')
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            echo "All downstream stages completed"
        }
        unstable {
            echo "Build is unstable due to downstream stage failures"
        }
    }
}
