pipeline {
  agent none // No global agent is defined; will be defined per stage
  options {
    buildDiscarder(logRotator(daysToKeepStr: '10', numToKeepStr: '50'))
  }

  parameters {
    choice(
      name: 'envBaseurl',
      choices: [
        'canv2-dpperf-cloudsnaplexmedium-fm.snaplogicdev.io',
        'canv2-dpperf-groundsnaplexmedium-fm.snaplogicdev.io'
      ],
      description: 'Select FM size'
    )
    string(name: 'Version', defaultValue: '', description: 'Provide build version')
    string(name: 'TestPlan', defaultValue: '', description: 'Provide jmx file')
    string(name: 'Threads', defaultValue: '', description: 'Number of Threads (users)')
    string(name: 'RampUpPeriod', defaultValue: '1', description: 'In seconds')
    string(name: 'LoopCount', defaultValue: '1', description: 'Loop count for the test')
    booleanParam(name: 'Debug', defaultValue: false, description: 'Enable debug logging')
  }

  stages {
    stage('Initialization') {
      steps {
        script {
          // Extract the 'pod' part from the URL
          env.LABEL = "${params.envBaseurl}".tokenize('.')[1]

          // Print the extracted label and the URL if debug mode is enabled
          if (params.Debug) {
            echo "Debug: Extracted label from URL: ${env.LABEL}"
            echo "Debug: Running on FM ${params.envBaseurl}"
          }

          // Validate critical parameters
          if (!params.TestPlan?.trim()) {
            error "TestPlan is required."
          }
          if (!params.Threads?.isNumber() || params.Threads.toInteger() <= 0) {
            error "Invalid Threads number. Please provide a positive integer."
          }
        }
      }
    }

    stage('Run Performance Tests') {
      agent { label "dpperf" }
      steps {
        script {
          // Validate that the necessary parameters are provided
          if (!params.TestPlan) {
            error "TestPlan parameter is required to run the tests."
          }
          if (!params.Threads || !params.RampUpPeriod || !params.LoopCount) {
            error "Threads, Ramp-Up Period, and Loop Count parameters must be provided."
          }

          // Log debug information if debug is enabled
          if (params.Debug) {
            echo "Debug: Running performance test with parameters:"
            echo "Debug: TestPlan: ${params.TestPlan}"
            echo "Debug: Threads: ${params.Threads}"
            echo "Debug: Ramp-Up Period: ${params.RampUpPeriod}"
            echo "Debug: Loop Count: ${params.LoopCount}"
          }
        }
        dir('./perf') {
          sh """
            echo "Running performance tests"
            python3 jRunner.py -f "${params.TestPlan}" -t "${params.Threads}" ${params.envBaseurl} -r ${params.RampUpPeriod} -l ${params.LoopCount}
          """
        }
      }
    }

    stage('Archive Results') {
      agent { label "dpperf" }
      steps {
        // Archive the JMeter CSV results
        archiveArtifacts artifacts: 'perf/results/performance_results.jtl', fingerprint: true
      }
    }

    stage('Publish Performance Report') {
      agent { label "dpperf" }
      steps {
        // Publish performance report using the Performance Plugin
        perfReport parsers: [[$class: 'JMeterParser']], sourceDataFiles: 'perf/results/performance_results.jtl'
      }
    }
  }

  post {
    always {
      echo "TODO: Cleaning workspace, or slack notification"
    }
    success {
      echo "Performance test completed successfully with no errors."
    }
    failure {
      echo "Performance test has failed."
    }
  }
}
