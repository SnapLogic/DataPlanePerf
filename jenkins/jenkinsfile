def auto_repo = 'https://github.com/SnapLogic/Automation'

// valid on can and stage. need to create accounts where deserved to be executed.

pipeline {
  agent none // No global agent is defined; will be defined per stage
  options {
    buildDiscarder(logRotator(daysToKeepStr: '10', numToKeepStr: '50'))
  }

  environment {
      USER_KEY = credentials('userAdmin')
      CP_ENV_VERSION = ''
    }

  parameters {
    choice(name: 'envBaseurl', choices: [ 'canv2-dpperf-cloudsnaplexmedium-fm.snaplogicdev.io',
                                          'canv2-dpperf-groundsnaplexmedium-fm.snaplogicdev.io' ], description: 'Select FM size')
    string(name: 'Threads', defaultValue: '', description: 'Number of Threads (users)')
    string(name: 'Ramp-UP Period', defaultValue: '0', description: 'In seconds')
    string(name: 'Loop Count', defaultValue: '1', description: '')
  }

  stages {
    stage('Initialization') {
      steps {
        script {
            // Extract the 'pod' part from the URL
            env.LABEL = "${params.envBaseurl}".tokenize('.')[1]
            // Print the extracted label
            echo "Extracted label from URL: ${env.LABEL}"
            echo "Running on FM ${params.envBaseurl}"
        }
      }
    }

    stage('Run Performance Tests') {
      // Dynamically assign the agent based on the extracted label
      agent { label "dpperf" }
      steps {
            dir('./perf') {
                sh "python3 jRunner.py -f RTTChildToGrandChild.jmx -t ${params.Threads} ${params.envBaseurl}"
      }
      }
    }
  }
}

